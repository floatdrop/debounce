name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - module: v1
            path: .
          - module: v2
            path: v2

    defaults:
      run:
        working-directory: ${{ matrix.path }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ubuntu-latest-go-1.24-${{ hashFiles(format('{0}/go.sum', matrix.path)) }}
        restore-keys: |
          ubuntu-latest-go-1.24-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt
      shell: bash
      run: |
        unformatted=$(gofmt -s -l .)
        if [ -n "$unformatted" ]; then
          echo "The following files are not formatted:"
          echo "$unformatted"
          exit 1
        fi

    - name: Run tests
      run: go test -v -race ./...

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - module: v1
            path: .
          - module: v2
            path: v2

    defaults:
      run:
        working-directory: ${{ matrix.path }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ubuntu-latest-go-1.24-${{ hashFiles(format('{0}/go.sum', matrix.path)) }}
        restore-keys: |
          ubunsu-latest-go-1.24-

    - name: Download dependencies
      run: go mod download

    - name: Run benchmarks
      run: go test -bench=. -benchmem -run=^$ ./...

  coverage:
    name: Coverage Check
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - module: v1
            path: .
          - module: v2
            path: v2

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ubuntu-latest-go-1.24-${{ hashFiles(format('{0}/go.sum', matrix.path)) }}
        restore-keys: |
          ubuntu-latest-go-1.24-

    - name: Download dependencies
      working-directory: ${{ matrix.path }}
      run: go mod download

    - name: Run tests with coverage
      working-directory: ${{ matrix.path }}
      run: go test -coverprofile=coverage.out ./...

    - name: Calculate coverage
      working-directory: ${{ matrix.path }}
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Coverage: $COVERAGE%"
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

    - name: Check coverage threshold
      run: |
        THRESHOLD=80
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "Coverage $COVERAGE% is below threshold $THRESHOLD%"
          exit 1
        else
          echo "Coverage $COVERAGE% meets threshold $THRESHOLD%"
        fi

    - name: Generate coverage report
      working-directory: ${{ matrix.path }}
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          ${{ matrix.path }}/coverage.out
          ${{ matrix.path }}/coverage.html

    - name: Go Coverage Badge  # Pass the `coverage.out` output to this action
      if: matrix.module == 'v2'
      uses: tj-actions/coverage-badge-go@v2
      with:
        filename: v2/coverage.out

    - name: Verify Changed files
      if: matrix.module == 'v2'
      uses: tj-actions/verify-changed-files@v16
      id: verify-changed-files
      with:
        files: README.md

    - name: Commit changes
      if: matrix.module == 'v2' && steps.verify-changed-files.outputs.files_changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "chore: Updated coverage badge."

    - name: Push changes
      if: matrix.module == 'v2' && steps.verify-changed-files.outputs.files_changed == 'true'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ github.token }}
        branch: ${{ github.head_ref }}

    - name: Add coverage to PR comment
      if: github.event_name == 'pull_request'
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "## ðŸ“Š ${{matrix.module}} Coverage Report" > coverage_comment.md
        echo "" >> coverage_comment.md
        echo "**Total Coverage: $COVERAGE%**" >> coverage_comment.md
        echo "" >> coverage_comment.md
        echo "### Coverage Details" >> coverage_comment.md
        echo '```' >> coverage_comment.md
        go tool cover -func=coverage.out >> coverage_comment.md
        echo '```' >> coverage_comment.md
        
        # Create or update PR comment
        gh pr comment ${{ github.event.number }} --body-file coverage_comment.md || \
        gh pr comment ${{ github.event.number }} --body "$(cat coverage_comment.md)"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - module: v1
            path: .
          - module: v2
            path: v2

    defaults:
      run:
        working-directory: ${{ matrix.path }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
